# задача № 3. Сформировать из введенного числа обратное по порядку
# входящих в него цифр и вывести на экран. Например, если введено число 3486,
# то надо вывести число 6843.

new_num = ''
 #show_size(new_num)

num = input('Введите число: ')
count = len(num)
k = range(count)

for i in k:
    new_num = new_num + str(int(num) % 10)
    # show_size(new_num)
    num = int(num) // 10
    # show_size(num)
print(new_num)

sum_member2 = show_size(new_num) + show_size(num) + show_size(count) + show_size(k)
print('В программе задействовано байт памяти: {}'.format(sum_member2))


#Посчитать четные и нечетные цифры введенного натурального числа.
#Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и
#2 нечетные (3 и 5).'''

number = input('Введите число: ')
even = 0
odd = 0
for f in number:
    i = int(f)
    if i % 2 == 0:
        even += 1
    else:
        odd += 1
print(f'У числа {number}: четных цифр - {even}, нечетных - {odd} ')


#В программе генерируется случайное целое число от 0 до 100. Пользователь
#должен его отгадать не более чем за 10 попыток. После каждой неудачной попытки
#должно сообщаться больше или меньше введенное пользователем число, чем то, что
#загадано. Если за 10 попыток число не отгадано, то вывести загаданное число.'''


from os import urandom as _urandom


def random_number():
    '''Функция генерирует случайное число от 0 до 100.
    Случайное число возвращает функция _urandom из генератора псевдослучайных
    чисел операционной системы. Побитовый сдвиг вправо увеличивает энтропию'''
    random = int(int.from_bytes(_urandom(7), 'big')) >> 5
    list = [n for n in range(0, 101)]
    return list[random % 100]


secret = random_number()
i = 1
while i <= 10:
    print(f'Попытка №{i:2} из 10')
    user_number = int(input('Введите число от 1 до 100: '))
    if user_number == secret:
        print('Загаданное число угадано')
        break
    elif user_number > secret:
        print(f'Ваше число {user_number} больше загаданного')
    else:
        print(f'Ваше число {user_number} меньше загаданного')
    i += 1
if i > 10:
    print(f'Не угадано! Загаданное число {secret}')
    
    
    
    #Напишите программу, доказывающую или проверяющую, что для множества
#натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
#где n - любое натуральное число.'''


def first(n):
    if n == 1:
        return n
    elif n > 0:
        return n + first(n-1)


def second(n):
    return n * (n + 1) // 2


n = 1

while True:
    if first(n) == second(n):
        print(f'Для n={n} - True')
    else:
        print(f'Для n={n} - False')
        break
    n += 1
    
    
    
    # Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно.
# Вывод выполнить в табличной форме: по десять пар «код-символ» в каждой строке.


# У меня получается только столбиком каждая отдельна!

first = 32
last = 127
for i in range(first, last + 1):
    print(f'{i}\t{chr(i)}')
    
    
    
    #Написать программу, которая будет складывать, вычитать, умножать или
#делить два числа. Числа и знак операции вводятся пользователем. После
#выполнения вычисления программа не должна завершаться, а должна запрашивать
#новые данные для вычислений. Завершение программы должно выполняться при вводе
#символа '0' в качестве знака операции. Если пользователь вводит неверный знак
#(не "0", "+", "-", "*", "/"), то программа должна сообщать ему об ошибке и
#снова запрашивать знак операции. Также сообщать пользователю о невозможности
#деления на ноль, если он ввел 0 в качестве делителя.'''


while True:
    op = input("Введите один из операторов +,-,*,/ или 0 для выхода: ")

    if op == '0':
        break

    x = float(input("Введите число x: "))
    y = float(input("Введите число y: "))

    if op == '+':
        res = x + y
    elif op == '-':
        res = x - y
    elif op == '*':
        res = x * y
    elif op == '/':
        if y == 0:
            print("деление на ноль запрещено")
            continue

        res = x / y
    else:
        print("операция не поддерживается")
        continue

    print(f"{x} {op} {y} = {res}")
    
    
    
    #Найти сумму n элементов следующего ряда чисел:
#1 -0.5 0.25 -0.125 ...
#Количество элементов (n) вводится с клавиатуры.


n = input("Количество элементов: ")
n = int(n)
item = 1
while n > 0:
   
    print(item, end=' ')
    
    item = item / -2
    
    n -= 1
print()
