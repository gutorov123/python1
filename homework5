#  Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод running (запуск).
#  Атрибут реализовать как приватный. В рамках метода реализовать переключение светофора в режимы: красный,
#  желтый, зеленый. Продолжительность первого состояния (красный) составляет 7 секунд, второго (желтый) — 2 секунды,
#  третьего (зеленый) — на ваше усмотрение. Переключение между режимами должно осуществляться только в указанном
#  порядке (красный, желтый, зеленый). Проверить работу примера, создав экземпляр и вызвав описанный метод.
#
# Задачу можно усложнить, реализовав проверку порядка режимов, и при его нарушении выводить соответствующее
# сообщение и завершать скрипт.

import time

class TrafficLight():

    
    red_color_wait = 7
    yellow_color_wait = 2
    green_color_wait = 4

    
    red_color_name = 'красный'
    yellow_color_name = 'желтый'
    green_color_name = 'зеленый'

    def __init__(self, color):
        self.__color = color
        print(f'\nСоздан новый объект TrafficLight со стартовым цветом {self.__color}')

    def switch_light(self, color, wait_period):
        self.wait_period = wait_period
        print(f'Включен {color} свет, время ожидания {self.wait_period} сек')
        time.sleep(self.wait_period)

    def running(self, color = ''):

        
        if not color:
            loc_color = self.__color
        else:
            loc_color = color

        if loc_color == self.red_color_name:
            self.switch_light('красный', self.red_color_wait)
            self.switch_light('желтый', self.yellow_color_wait)
            self.switch_light('зеленый', self.green_color_wait)
        elif loc_color == self.yellow_color_name:
            self.switch_light('желтый', self.yellow_color_wait)
            self.switch_light('зеленый', self.green_color_wait)
        else:
            self.switch_light('зеленый', self.green_color_wait)

        print('СВЕТОФОР ГОТОВ')

tl1 = TrafficLight('красный')
tl1.running()

tl2 = TrafficLight('желтый')
tl2.running()

tl3 = TrafficLight('зеленый')
tl3.running()


tl1 = TrafficLight('красный')
tl1.running('желтый')



#Реализовать класс Road (дорога), в котором определить атрибуты: length (длина), width
#(ширина). Значения данных атрибутов должны передаваться при создании экземпляра класса.
#Атрибуты сделать защищенными. Определить метод расчета массы асфальта, необходимого
#для покрытия всего дорожного полотна. Использовать формулу: длина*ширина*масса
#асфальта для покрытия одного кв метра дороги асфальтом, толщиной в 1 см*число см
#толщины полотна. Проверить работу метода.
#Например: 20м*5000м*25кг*5см = 12500 т

class Road:
    _length = 0
    _width = 0

    def __init__(self, _length, _width, weight, depth):
        self._length = _length
        self._width = _width
        self.weight = weight
        self.depth = depth

    def mass(self):
        leng = self._length
        wid = self._width
        w = self.weight
        dep = self.depth
        total = leng * wid * w * dep / 1000
        return print(f"Масса асфальта\n {leng} м * {wid} м * {w} кг * {dep} см = ", total, "т")


r = Road(20, 5000, 25, 5)
r.mass()



#Реализовать базовый класс Worker (работник), в котором определить атрибуты:
#       name, surname, position (должность), income (доход).
#       Последний атрибут должен быть защищенным и ссылаться на словарь, содержащий элементы:
#       оклад и премия, например, {"profit": profit, "bonus": bonus}.
#       Создать класс Position (должность) на базе класса Worker.
#       В классе Position реализовать методы получения полного имени сотрудника (get_full_name)
#       и дохода с учетом премии (get_full_profit).
#       Проверить работу примера на реальных данных (создать экземпляры класса Position, передать данные,
#       проверить значения атрибутов, вызвать методы экземпляров).

# Solution:


class Worker:

    def __init__(self, name='ДИма', surname='петров', position='аналитик', wage=10, bonus=2):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {'wage': wage, 'bonus': bonus}


class Position(Worker):

    def get_full_name(self):
        return self.name + ' ' + self.surname

    def get_full_salary(self):
        return self._income['wage'] + self._income['bonus']


v_pet = Position('Дмитрий', 'полов', 'учитель', 110, 40)
print(f'New attributes are: {v_pet.name}, {v_pet.surname}, {v_pet.position}, {v_pet._income}')
print(f'Total salary of {v_pet.get_full_name()} is {v_pet.get_full_salary()}')



#Реализуйте базовый класс Car.
    #У данного класса должны быть следующие атрибуты: speed, color, name, is_police (булево).
    #А также методы: go, stop, turn(direction), которые должны сообщать, что машина поехала, остановилась, повернула (куда).
    #Опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar.
    #Добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля.
    #Для классов TownCar и WorkCar переопределите метод show_speed. При значении скорости свыше 60 (TownCar) и
    #40 (WorkCar) должно выводиться сообщение о превышении скорости.
    #Создайте экземпляры классов, передайте значения атрибутов.
    #Выполните доступ к атрибутам, выведите результат. Выполните вызов методов и также покажите результат.

class Car:
    def __init__(self, color: str, name: str, is_police: bool):
        self.speed = 0
        self.color = color
        self.name = name
        self.is_police = is_police

    def go(self, speed):
        self.speed = speed
        print(f'Разгоняемся до {speed} км/ч')

    def stop(self):
        self.speed = 0
        print('Останавливаемся')

    def turn(self, direction: str):
        if self.speed > 0:
            print(f'Поворачиваем {direction}')
        else:
            print('Не можем повернуть - мы стоим на месте')

    def show_speed(self):
        print(f'Скорость {self.speed} км/ч')


class TownCar(Car):
    def __init__(self, color: str, name: str):
        self.speed = 0
        self.color = color
        self.name = name
        self.is_police = False

    def show_speed(self):
        if self.speed > 60:
            print(f'Внимание! Превышение скорости {self.speed} км/ч')
        else:
            print(f'Скорость {self.speed} км/ч')


class SportCar(Car):
    def __init__(self, color: str, name: str):
        self.speed = 0
        self.color = color
        self.name = name
        self.is_police = False


class WorkCar(Car):
    def __init__(self, color: str, name: str):
        self.speed = 0
        self.color = color
        self.name = name
        self.is_police = False

    def show_speed(self):
        if self.speed > 40:
            print(f'Внимание! Превышение скорости {self.speed} км/ч')
        else:
            print(f'Скорость {self.speed} км/ч')


class PoliceCar(Car):
    def __init__(self, color: str, name: str):
        self.speed = 0
        self.color = color
        self.name = name
        self.is_police = True


def test_drive(vehicle):
    print(f"Тест-драйв {'полицейского' if vehicle.is_police else 'гражданского'} автомобиля {vehicle.name}, цвет {vehicle.color}")
    vehicle.go(40)
    vehicle.show_speed()
    vehicle.turn('направо')
    vehicle.stop()
    vehicle.show_speed()
    vehicle.turn('налево')
    vehicle.go(60)
    vehicle.show_speed()
    vehicle.go(120)
    vehicle.show_speed()
    vehicle.stop()
    print("Тест-драйв окончен", end="\n\n")


car = Car('фиолетовая', '2101', False)
test_drive(car)

vaz_2105 = TownCar('серая', 'ваз 2105')
test_drive(vaz_2105)

vaz_2106 = SportCar('синий', 'ваз 2106')
test_drive(vaz_2106)

vaz_2108 = WorkCar('белая', 'ваз 2108')
test_drive(vaz_2108)

vaz_2109 = PoliceCar('черная', 'ваз 2109')
test_drive(vaz_2109)
