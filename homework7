#Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()),
#который должен принимать данные (список списков) для формирования матрицы.
#Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде.
#Далее реализовать перегрузку метода add() для реализации операции
#сложения двух объектов класса Matrix (двух матриц).
#Результатом сложения должна быть новая матрица.
#Подсказка: сложение элементов матриц выполнять поэлементно —
#первый элемент первой строки первой матрицы складываем
#с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, matrix_data: List[List]):
        self.__matrix = matrix_data

        m_rows = len(self.__matrix)
        self.__matrix_size = frozenset([(m_rows, len(row)) for row in self.__matrix])

        if len(self.__matrix_size) != 1:
            raise ValueError("Invalid matrix size")

    def __add__(self, other: "Matrix") -> "Matrix":
        if not isinstance(other, Matrix):
            raise TypeError(f"'{other.__class__.__name__}' "
                            f"incompatible object type")
        if self.__matrix_size != other.__matrix_size:
            raise ValueError(f"Matrix sizes difference")

        result = []

        for item in zip(self.__matrix, other.__matrix):
            result.append([sum([j, k]) for j, k in zip(*item)])

        return Matrix(result)

    def __str__(self) -> str:
        return '\n'.join(['\t'.join(map(str, row)) for row in self.__matrix])


if __name__ == '__main__':
    matrix1 = Matrix([[1, 2], [3, 4]])
    print(matrix1, '\n')

    matrix2 = Matrix([[10, 20], [30, 40]])
    print(matrix2, '\n')

    print(matrix1 + matrix2)
    
    
    
#Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль.
#Проверьте его работу на данных, вводимых пользователем. При вводе пользователем нуля
#в качестве делителя программа должна корректно обработать эту ситуацию и не завершиться с ошибкой.


class DivisionByNull:
    def __init__(self, divider, denominator):
        self.divider = divider
        self.denominator = denominator

    @staticmethod
    def divide_by_null(divider, denominator):
        try:
            return (divider / denominator)
        except:
            return (f"Деление на ноль недопустимо")


div = DivisionByNull(10, 100)
print(DivisionByNull.divide_by_null(10, 0))
print(DivisionByNull.divide_by_null(10, 0.1))
print(div.divide_by_null(100, 0))



#Создайте собственный класс-исключение,
#который должен проверять содержимое списка на наличие только чисел.
#Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять
#список только числами.
#Класс-исключение должен контролировать типы данных элементов списка.


class NotNumber(ValueError):
    pass
 
my_list = []
while True:
    try:
        value = input('Введите число в список:')
        if value == 'q':
            break
        if not value.isdigit():
            raise NotNumber(value)
        my_list.append(int(value))
    except NotNumber as ex:
        print('Не число!', ex)
print(my_list)
